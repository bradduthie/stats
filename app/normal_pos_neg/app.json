[{"name":"app.R","content":"library(shiny);\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Visualising mean and standard deviation on a histogram\"),\n    \n    hr(),\n    h4(\"Use the sliders at the bottom to change the mean and standard deviation or a randomly generated data set and visualise the data in a histogram. The solid black vertical line indicates the position of the mean, while the red dashed lines show two standard deviations above and below the mean.\"),\n    hr(),\n    \n    plotOutput(\"distPlot\"),\n    \n    fluidRow(\n        column(4, offset = 1,\n               sliderInput(\"Mean\", label = \"Mean\", width=\"100%\", min = -4, \n                           max = 4, value = 0, step = 0.25),\n        ),\n        column(1, offset = 0),\n        column(4, offset = 1,\n            sliderInput(\"SD\", label = \"Standard Deviation (SD)\", width=\"100%\",\n                        min = 1, max = 2, value = 1, step = 0.1)\n        )\n    )\n\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    mbox <- function(x0, x1, y0, y1){\n        xx <- seq(from=x0, to=x1, length.out = 100);\n        yy <- seq(from=y0, to=y1, length.out = 100);\n        xd <- c(rep(x0, 100), xx, rep(x1,100), rev(xx));\n        yd <- c(yy, rep(y1,100), rev(yy), rep(y0, 100));\n        return(list(x=xd, y=yd));\n    }\n\n    output$distPlot <- renderPlot({\n        Mn  <- as.numeric(input$Mean);\n        Sd  <- as.numeric(input$SD);\n        rand_dat <- rnorm(n = 150, mean = Mn, sd = Sd);\n        real_mn  <- mean(rand_dat);\n        real_sd  <- sd(rand_dat);\n        par(mar = c(5, 5, 1, 1), lwd = 3);\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Measured value (e.g., tree height in m)\", cex.lab = 1.5, \n             lwd = 4, xaxt = \"n\", col = \"blue\", xlim = c(-12, 12), \n             cex.axis = 1.5,  ylim = c(0, 100), breaks = -12:12, add = FALSE);\n        axis(side = 1, at = -12:12, cex.axis = 1.5, lwd = 3, line = -0.75);\n        arrows(x0 = real_mn, x1 = real_mn, y0 = 90, y1 = 80, lwd = 4);\n        tbox <- mbox(x0 = real_mn - 4, x1 = real_mn + 4, y0 = 90, y1 = 100);\n        polygon(x=tbox$x, y=tbox$y, lwd=3, border=\"black\", col=\"white\");\n        text(x = real_mn, y = 95, cex = 2, labels = \"Mean value\");\n        lines(x = c(real_mn, real_mn), y = c(0, 75), lwd = 4);\n        lines(x = c(real_mn - 2*real_sd, real_mn - 2*real_sd), y = c(0, 75), \n              lwd = 2, lty = \"dashed\", col = \"red\");\n        lines(x = c(real_mn + 2*real_sd, real_mn + 2*real_sd), y = c(0, 75), \n              lwd = 2, lty = \"dashed\", col = \"red\");\n        text(x = real_mn + 3*real_sd + 1.1, y = 50, labels = \"+2 * SD\", cex = 2,\n             col = \"red\");\n        text(x = real_mn - 3*real_sd - 1.1, y = 50, labels = \"-2 * SD\", cex = 2,\n             col = \"red\");\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Measured value (e.g., tree height in m)\", cex.lab = 1.5, \n             lwd = 4, xaxt = \"n\", col = \"blue\", xlim = c(-12, 12), \n             cex.axis = 1.5,  ylim = c(0, 100), breaks = -12:12, add = TRUE);\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n","type":"text"},{"name":"norm_pos_neg.R","content":"library(shiny);\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Visualising mean and standard deviation on a histogram\"),\n    \n    hr(),\n    h4(\"Use the sliders at the bottom to change the mean and standard deviation or a randomly generated data set and visualise the data in a histogram. The solid black vertical line indicates the position of the mean, while the red dashed lines show two standard deviations above and below the mean.\"),\n    hr(),\n    \n    plotOutput(\"distPlot\"),\n    \n    fluidRow(\n        column(4, offset = 1,\n               sliderInput(\"Mean\", label = \"Mean\", width=\"100%\", min = -10, \n                           max = 10, value = 0, step = 0.25),\n        ),\n        column(1, offset = 0),\n        column(4, offset = 1,\n            sliderInput(\"SD\", label = \"Standard Deviation (SD)\", width=\"100%\",\n                        min = 1, max = 3, value = 2, step = 0.1)\n        )\n    )\n\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    mbox <- function(x0, x1, y0, y1){\n        xx <- seq(from=x0, to=x1, length.out = 100);\n        yy <- seq(from=y0, to=y1, length.out = 100);\n        xd <- c(rep(x0, 100), xx, rep(x1,100), rev(xx));\n        yd <- c(yy, rep(y1,100), rev(yy), rep(y0, 100));\n        return(list(x=xd, y=yd));\n    }\n\n    output$distPlot <- renderPlot({\n        Mn  <- as.numeric(input$Mean);\n        Sd  <- as.numeric(input$SD);\n        rand_dat <- rnorm(n = 250, mean = Mn, sd = Sd);\n        real_mn  <- mean(rand_dat);\n        real_sd  <- sd(rand_dat);\n        par(mar = c(5, 5, 1, 1), lwd = 3);\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Measured value (e.g., tree height in m)\", cex.lab = 1.5, \n             lwd = 4, xaxt = \"n\", col = \"blue\", xlim = c(-16, 16), \n             cex.axis = 1.5,  ylim = c(0, 100), breaks = -16:16, add = FALSE);\n        axis(side = 1, at = -16:16, cex.axis = 1.5, lwd = 3, line = -0.75);\n        arrows(x0 = real_mn, x1 = real_mn, y0 = 90, y1 = 80, lwd = 4);\n        tbox <- mbox(x0 = real_mn - 4, x1 = real_mn + 4, y0 = 90, y1 = 100);\n        polygon(x=tbox$x, y=tbox$y, lwd=3, border=\"black\", col=\"white\");\n        text(x = real_mn, y = 95, cex = 2, labels = \"Mean value\");\n        lines(x = c(real_mn, real_mn), y = c(0, 75), lwd = 4);\n        lines(x = c(real_mn - real_sd, real_mn - real_sd), y = c(0, 75), \n              lwd = 2, lty = \"dashed\", col = \"red\");\n        lines(x = c(real_mn + real_sd, real_mn + real_sd), y = c(0, 75), \n              lwd = 2, lty = \"dashed\", col = \"red\");\n        text(x = real_mn + 2*real_sd + 1.1, y = 50, labels = \"+2 * SD\", cex = 2,\n             col = \"red\");\n        text(x = real_mn - 2*real_sd - 1.1, y = 50, labels = \"-2 * SD\", cex = 2,\n             col = \"red\");\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Measured value (e.g., tree height in m)\", cex.lab = 1.5, \n             lwd = 4, xaxt = \"n\", col = \"blue\", xlim = c(-16, 16), \n             cex.axis = 1.5,  ylim = c(0, 100), breaks = -16:16, add = TRUE);\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n","type":"text"}]
