[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(DT)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n    \n    # Application title\n    titlePanel(\"\"),\n    \n    column(4,\n           fluidRow(\n               column(4, offset = 1,\n                      actionButton(\"go\", \"Randomise\"), \n                      \n               ),\n               column(1, offset = 0),\n               column(4, offset = 1,\n                      actionButton(\"reset\", \"Reset\")\n               ),\n           ),\n           DT::dataTableOutput(\"tt\")\n    ),\n    \n    column(8, \n           plotOutput(\"rplot\")\n    )\n    \n    \n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    sp   <- c(rep(\"SO1\", 17), rep(\"SO2\", 15))\n    eg   <- c(3.256, 3.133, 3.071, 2.299, 2.995, 2.929, 3.291, 2.658, 3.406, \n              2.976, 2.817, 3.133, 3.000, 3.027, 3.178, 3.133, 3.210, 3.014, \n              2.790, 2.985, 2.911, 2.914, 2.724, 2.967, 2.745, 2.973, 2.560, \n              2.837, 2.883, 2.668, 3.063, 2.639);\n    wp   <- as.data.frame(cbind(sp, eg));\n    difs <- tapply(X = eg, INDEX = sp, FUN = mean);\n    df1  <- difs[1] - difs[2];\n    \n    M  <- reactiveValues(data = df1)\n    N  <- reactiveValues(data = 1:length(sp))\n    W  <- reactiveValues(data = as.data.frame(cbind(sp, eg)))\n    P  <- reactiveValues(data = df1);\n    \n    observeEvent(input$go, {\n        theord  <- sample(1:length(sp), length(sp));\n        Species <- sp[theord];\n        Ovi_len <- eg;\n        N$data  <- theord;\n        W$data  <- as.data.frame(cbind(Species, Ovi_len));\n        difs    <- tapply(X = eg, INDEX = sp[theord], FUN = mean);\n        dval    <- difs[1] - difs[2];\n        M$data  <- c(M$data, dval);\n        P$data  <- dval;\n    })\n    \n    observeEvent(input$reset, {\n        N$data  <- 1:24;\n        M$data  <- df1;\n        W$data  <- as.data.frame(cbind(sp, eg))\n    })\n    \n    output$rplot <- renderPlot({\n        breaks <- seq(from = -0.28, to = 0.28, by = 0.01)\n        par(mar = c(5, 5, 1, 1));\n        hist(M$data, main = \"\", xlab = \"Random mean difference (mm)\", cex.lab = 1.5, \n             cex.axis = 1.5, xlim = c(-0.28, 0.28), ylim = c(0, 20), \n             breaks = breaks, col = \"grey\");\n        arrows(x0 = df1, x1 = df1 , y0 = 6, y1 = 1.5, \n               length = 0.15, lwd = 4, col = \"red\")\n        text(x = df1 , y = 6.5, labels = \"Observed\", cex = 1.5, col = \"red\")\n        # bquote(\"(\" * bar(x) * \" = \" * .(x) * \", \" *  bar(y) * \" = \" * .(y) * \")\")\n        answer <- paste(\"Mean(SO1) - Mean(SO2) = \", round(P$data, digits = 3), \"mm\")\n        text(x = 0, y = 19.5, labels = answer, cex = 2)\n        hist(df1, main = \"\", xlab = \"Random mean difference\", cex.lab = 1.5, \n             cex.axis = 1.5, xlim = c(-8, 8), ylim = c(0, 10), breaks = breaks,\n             add = TRUE, col = \"red\");\n    }, height = 700)\n    \n    output$tt <- DT::renderDataTable({\n        options(DT.options = list(pageLength = 32));\n        wp   <- data.frame(Species = W$data[,1], Ovipositor = W$data[,2])\n        ddd  <- datatable(wp)\n        formatStyle(ddd, \"Species\", \n                    backgroundColor = styleEqual( c(\"SO1\", \"SO2\"), \n                                                  c(\"#E69F00\", \"#56B4E9\")\n                    ),\n                    fontWeight = 'bold',\n                    pageLength = 50, \n        )\n    })\n    \n    \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n","type":"text"}]
