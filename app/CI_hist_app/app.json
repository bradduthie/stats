[{"name":"app.R","content":"library(shiny);\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n    \n    # Application title\n    titlePanel(\"Visualising confidence intervals on a histogram\"),\n    \n    hr(),\n    h4(\"Use the sliders at the bottom to change the mean, standard deviation, and sample size of a randomly generate data set. The solid black vertical line indicates the position of the mean, while the red dashed lines show confidence intervals above and below the mean. Think about what happens to the confidence intervals as you increase and decrease the mean, standard deviation, and sample size. Try to link the changes that you see in the confidence intervals to the mathematical expressions in red that define them.\"),\n    hr(),\n    \n    plotOutput(\"distPlot\"),\n    \n    inputPanel(\n        sliderInput(\"N_val2\", label = \"Sample size\", width = \"100%\", \n                    min = 10, max = 100, value = 20, step = 1),\n        sliderInput(\"mn_val2\", label = \"Mean\", width = \"100%\", \n                    min = 10, max = 20, value = 15, step = 0.2),\n        sliderInput(\"sd_val2\", label = \"Standard Deviation\", width = \"125%\",\n                    min = 0, max = 3.4, value = 1, step = 0.2),\n        selectInput(\"CI\", \"Confidence Interval (CI)\",\n                    c(\"80%\" = \"1.28\", \n                      \"90%\" = \"1.64\",\n                      \"95%\" = \"1.96\",\n                      \"99%\" = \"2.58\"),\n                    selected = \"1.96\"\n        )\n    )\n    \n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n    \n    mbox <- function(x0, x1, y0, y1){\n        xx <- seq(from=x0, to=x1, length.out = 100);\n        yy <- seq(from=y0, to=y1, length.out = 100);\n        xd <- c(rep(x0, 100), xx, rep(x1,100), rev(xx));\n        yd <- c(yy, rep(y1,100), rev(yy), rep(y0, 100));\n        return(list(x=xd, y=yd));\n    }\n    \n    output$distPlot <- renderPlot({\n        rand_dat <- rnorm(n = input$N_val2, mean = input$mn_val2, sd = input$sd_val2);\n        real_mn  <- mean(rand_dat);\n        mn_diff  <- real_mn - input$mn_val2;\n        rand_dat <- rand_dat - mn_diff;\n        real_sd  <- sd(rand_dat);\n        lci      <- as.numeric(input$mn_val2) - \n            (as.numeric(input$CI) * (as.numeric(input$sd_val2))) / sqrt(as.numeric(input$N_val2));\n        uci      <- as.numeric(input$mn_val2) + \n            (as.numeric(input$CI) * (as.numeric(input$sd_val2))) / sqrt(as.numeric(input$N_val2));\n        par(mar = c(5, 5, 1, 1), lwd = 3);\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Random value\", cex.lab = 1.5, lwd = 4,\n             xaxt = \"n\", col = \"blue\", xlim = c(8, 22), cex.axis = 1.5, \n             ylim = c(0, 100), breaks = 0:30, add = FALSE);\n        axis(side = 1, at = 0:30, cex.axis = 1.5, lwd = 3, line = -0.75);\n        arrows(x0 = input$mn_val2, x1 = input$mn_val2, y0 = 90, y1 = 80, lwd = 4);\n        tbox <- mbox(x0 = input$mn_val2 - 2, x1 = input$mn_val2 + 2, y0 = 90, y1 = 100);\n        polygon(x=tbox$x, y=tbox$y, lwd=3, border=\"black\", col=\"white\");\n        text(x = input$mn_val2, y = 95, cex = 2, labels = \"Mean value\");\n        lines(x = c(input$mn_val2, input$mn_val2), y = c(0, 75), lwd = 4);\n        lines(x = c(lci, lci), y = c(0, 75), lwd = 1, lty = \"dashed\", col = \"red\");\n        lines(x = c(uci, uci), y = c(0, 75), lwd = 1, lty = \"dashed\", col = \"red\");\n        hist(x = rand_dat, main = \"\", ylab = \"Frequency\",\n             xlab = \"Random value\", cex.lab = 1.5, lwd = 4,\n             xaxt = \"n\", col = \"blue\", xlim = c(8, 22), cex.axis = 1.5, \n             ylim = c(0, 100), breaks = 0:30, add = TRUE);\n        text(x = input$mn_val2 + 2.5, y = 50, cex = 1.75, col = \"red\",\n             labels = bquote(paste(.(input$mn_val2) + .(input$CI) * frac(.(input$sd_val2), sqrt(.(input$N_val2)))))\n        );\n        text(x = input$mn_val2 - 2.5, y = 50, cex = 1.75, col = \"red\",\n             labels = bquote(paste(.(input$mn_val2) - .(input$CI) * frac(.(input$sd_val2), sqrt(.(input$N_val2)))))\n        );\n        \n        \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n","type":"text"}]
